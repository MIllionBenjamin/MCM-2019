#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan 28 01:59:44 2019

@author: apple
"""


from matplotlib import pyplot as plt
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import pandas as pd
import csv

class Vividict(dict):
    def __missing__(self, key):
        value = self[key] = type(self)()
        return value

states = {'OH': {}, 'KY': {}, 'VA': {}, 'WV': {}, 'PA': {}}
countyLoc = np.load("countyLoc.npy").item()
OP_Sort_Data = np.load("OP_Sort_Data.npy").item()
#print(countyLoc)
#print(type(countyLoc), type(OP_Sort_Data))
print(OP_Sort_Data)




fig = plt.figure()
#plt.figure(figsize = (6, 6))
ax = Axes3D(fig)



X = []
#['37.2428', '36.6517', '38.0331', '37.075', '36.7981', '38.1904', '36.667', '38.9792', '38.2448', '38.4562', '37.6006', '38.5817', '37.4818', '37.6512', '38.0427', '37.1835', '37.0884', '36.5055', '39.0319', '36.874', '38.734', '38.4062', '37.2567', '36.7753', '38.002', '37.2493', '36.6906', '37.3517', '36.7906', '37.8624', '37.1952', '38.0929', '37.6718', '37.9492', '38.3609', '37.6253', '38.2984', '36.5145', '38.7773', '37.6152', '38.5762', '36.5376', '37.4241', '37.2598', '38.5727', '37.6248', '36.8432', '38.3855', '37.2535', '37.7762', '38.4334', '37.1881', '37.4303', '38.251', '37.8299', '37.7862', '39.0801', '37.4701', '36.9273', '37.5081', '37.1209', '38.027', '37.5843', '37.0773', '37.1953', '38.6876', '37.5349', '37.3981', '36.9872', '36.9862', '37.5903', '37.7459', '37.6265', '37.0284', '37.8693', '38.7563', '37.0086', '36.6957', '37.6183', '37.8928', '37.9162', '37.8117', '37.0784', '36.7238', '37.966', '38.0184', '37.1714', '37.6592', '38.3162', '37.5259', '38.3105', '38.4637', '37.3665', '38.6028', '37.2773', '37.316', '37.7951', '37.0717', '38.5317', '37.298', '38.1405', '36.8851', '38.2684', '38.1926', '36.7158', '38.117', '37.4126', '36.9953', '36.6867', '38.7122', '37.0468', '37.6921', '36.6578', '37.6392', '36.7393', '37.7999', '38.137', '38.937', '40.7079', '40.8037', '41.8003', '39.308', '40.5475', '39.9012', '38.919', '39.4859', '40.555', '40.0565', '39.9971', '38.7934', '39.3256', '40.6042', '40.3356', '40.9063', '41.4419', '40.1157', '41.3831', '40.4098', '41.4103', '39.8459', '39.6135', '39.9682', '41.6689', '38.9502', '41.5326', '39.6827', '39.9832', '39.0871', '40.9569', '40.788', '41.457', '39.3439', '39.5862', '40.6673', '41.2744', '38.989', '40.5728', '40.4695', '41.5873', '38.6581', '40.0247', '40.4424', '41.3134', '41.7084', '39.9607', '40.9196', '40.454', '41.0287', '39.041', '40.353', '40.1315', '39.6266', '39.7798', '39.6567', '40.3943', '39.9948', '39.7969', '41.471', '41.0797', '39.6063', '39.7162', '39.0501', '41.1623', '39.8508', '41.1052', '40.7655', '39.3017', '41.2572', '38.7539', '41.2441', '40.2951', '40.9736', '41.1023', '41.1673', '40.4759', '40.1503', '40.8653', '39.3153', '39.3153', '39.2815', '40.7486', '41.5884', '41.3232', '40.7011', '39.8035', '40.6542', '40.7384', '40.5717', '40.162', '40.303', '40.3348', '41.7059', '40.154', '40.8992', '40.2884', '41.5102', '40.8659', '40.8936', '40.0524', '41.2346', '40.8395', '41.1261', '41.0024', '41.6023', '40.137', '40.6029', '39.9868', '41.4574', '42.0041', '39.896', '41.4688', '40.0589', '39.8474', '39.8806', '40.2056', '40.5652', '41.1817', '40.5657', '41.631', '40.0267', '40.8619', '40.2793', '40.7439', '41.3217', '41.2228', '41.7451', '41.4052', '40.6802', '41.1149', '40.0029', '40.9615', '40.6639', '41.0089', '40.4559', '40.0076', '41.4212', '41.872', '40.7961', '40.7892', '40.1096', '41.418', '41.7053', '41.8062', '40.9642', '41.4282', '41.9837', '40.0923', '41.3073', '40.3198', '41.5602', '40.0026', '37.6213', '38.0129', '38.8184', '37.7473', '37.3885', '37.5815', '37.359', '38.8786', '38.1618', '38.054', '37.3359', {}, '37.1482', '37.3638', '36.618', '36.7564', '37.2932', '37.7093', '37.7316', '37.0532', '37.9287', '36.7385', '37.039', '38.0374', '36.6778', '37.5187', '39.0932', '37.265', '37.5013', '38.6371', '37.4914', '36.5831', '37.0145', '37.1393', '36.6953', '37.8046', '38.7802', '38.8531', '38.8846', '38.5346', '36.9118', '37.8652', '37.0205', '36.6831', '39.2545', '38.2992', '36.666', '37.3833', '37.2766', '37.6973', '36.7022', '38.2314', '36.8224', '36.7131', '37.0551', '37.7597', '38.4362', '37.628', '36.6313', '38.3357', '37.2914', '36.7088', '37.3799', '38.3444', '37.5519', '37.7675', '36.6306', '37.7825', '39.1997', '38.0212', '36.9149', '37.4004', '38.3668', '38.748', '36.6827', '37.4365', '36.5624', '37.5512', '37.1411', '37.7051', '37.5095', '37.1052', '36.8945', '37.8421', '36.9317', '37.1812', '38.2599', '38.7651', '36.599', '37.2042', '36.8201', '37.1318', '36.8468', '37.4751', '37.3029', '37.1243', '38.6404', '37.026', '37.1229', '38.7121', '37.5294', '37.2784', '37.9062', '38.4465', '36.8907', '37.2864', '36.7745', '38.8753', '36.8179', '36.5698', '38.201', '38.4597', '38.1593', '36.6953', '37.1371', '36.948', '37.0868', '36.7335', '38.9465', '36.7089', '38.0673', '38.0296', '37.2691', '39.1734', '36.9067', '36.821', '37.2352', '39.1003', '39.4415', '38.1398', '38.7393', '40.3385', '38.4353', '38.9406', '38.4707', '39.2893', '38.0506', '39.2773', '38.0586', '40.6129', '39.0418', '39.3648', '38.9059', '39.4318', '38.2962', '37.8679', '39.4505', '39.828', '38.9876', '37.4262', '37.3144', '39.6151', '37.5554', '39.6587', '37.3991', '39.627', '38.251', '40.1647', '38.3964', '39.5102', '38.5159', '37.6221', '38.9211', '39.074', '38.8996', '37.6651', '39.1266', '39.4131', '38.8368', '38.0231', '39.5304', '39.0365', '39.3236', '37.5735']
Y = []
#['-85.1894', '-86.2614', '-84.9031', '-88.9749', '-85.9705', '-83.8235', '-83.6941', '-84.8249', '-84.0585', '-82.6978', '-84.9497', '-84.1566', '-83.3252', '-86.2766', '-85.5553', '-86.6353', '-87.8447', '-88.3253', '-84.3708', '-89.0091', '-85.0612', '-83.038', '-84.8819', '-87.358', '-84.3158', '-83.8213', '-85.1353', '-88.1989', '-85.3675', '-86.9914', '-86.2691', '-83.1241', '-83.8969', '-84.3641', '-83.6744', '-82.7277', '-84.8124', '-88.8818', '-84.9044', '-84.5817', '-84.5852', '-88.5006', '-86.4906', '-85.4966', '-82.8302', '-86.0189', '-83.3184', '-84.2995', '-85.7896', '-87.3753', '-85.1689', '-87.551', '-83.9869', '-85.591', '-84.7096', '-82.7935', '-84.5628', '-82.9066', '-83.6194', '-85.6992', '-84.0804', '-82.9724', '-83.7065', '-83.3916', '-82.7047', '-83.0471', '-84.6606', '-88.3754', '-86.9502', '-87.9361', '-84.2897', '-83.0646', '-85.4277', '-88.3104', '-82.5399', '-83.8845', '-88.5261', '-84.4769', '-87.3921', '-86.2219', '-83.5785', '-84.9197', '-85.6944', '-85.9561', '-83.832', '-83.2713', '-87.0364', '-85.5885', '-84.0334', '-86.6875', '-85.4895', '-84.7772', '-83.768', '-84.3988', '-83.301', '-82.358', '-83.7041', '-84.748', '-84.0358', '-84.2157', '-83.5414', '-85.1975', '-84.503', '-85.1072', '-86.5585', '-85.3722', '-85.1286', '-87.1478', '-87.9186', '-85.3741', '-86.2506', '-85.2193', '-84.9758', '-87.6446', '-84.1645', '-83.4173', '-84.8219', '-83.5753', '-84.3526', '-82.1965', '-80.9461', '-81.8974', '-84.3931', '-81.1368', '-83.9854', '-84.5523', '-81.1992', '-84.0253', '-83.777', '-84.1373', '-83.6937', '-80.655', '-82.0017', '-82.769', '-81.853', '-84.4966', '-84.6305', '-82.9516', '-82.3214', '-82.6048', '-83.6106', '-82.8833', '-84.1522', '-82.1131', '-81.1157', '-83.9414', '-81.4601', '-84.6177', '-83.785', '-83.643', '-84.1441', '-83.6001', '-82.5262', '-82.0952', '-82.8396', '-82.5449', '-80.7259', '-82.194', '-81.4332', '-82.4735', '-82.6472', '-83.8044', '-81.9813', '-83.8384', '-83.4878', '-80.9963', '-83.1848', '-81.7324', '-82.1279', '-84.6426', '-84.4295', '-80.9059', '-84.1999', '-81.8466', '-82.6995', '-81.7379', '-81.3355', '-83.2915', '-84.7272', '-82.2046', '-82.9928', '-83.0566', '-81.3142', '-84.5434', '-84.001', '-82.5276', '-83.3396', '-83.0532', '-82.9446', '-83.2338', '-84.3692', '-81.4045', '-81.4216', '-80.6961', '-81.348', '-83.2371', '-84.5873', '-82.4663', '-84.277', '-81.5971', '-81.8334', '-84.4308', '-83.6468', '-83.3923', '-77.0199', '-79.8389', '-79.5287', '-80.2559', '-78.2545', '-75.967', '-78.3959', '-76.8277', '-74.9915', '-80.0487', '-78.918', '-78.2363', '-75.8322', '-77.4765', '-75.644', '-79.536', '-78.3526', '-77.2363', '-76.4752', '-80.3094', '-77.5546', '-76.8102', '-75.401', '-78.5343', '-80.3192', '-79.6976', '-79.1181', '-77.608', '-78.1434', '-80.2693', '-78.1781', '-79.2952', '-79.2027', '-77.2362', '-75.4703', '-76.171', '-80.283', '-76.4352', '-75.6583', '-75.8578', '-77.0381', '-78.3903', '-80.3838', '-77.3878', '-75.4589', '-75.2707', '-76.612', '-75.4741', '-76.8506', '-77.3517', '-75.134', '-74.9952', '-77.8372', '-76.2235', '-77.0445', '-78.8043', '-76.492', '-75.7674', '-77.0787', '-76.8901', '-79.7035', '-79.3395', '-79.8565', '-75.3199', '-79.5034', '-75.7822', '-76.6043', '-75.7641', '-78.3956', '-77.0861', '-80.2403', '-77.9031', '-79.0508', '-78.8265', '-77.1011', '-78.8413', '-79.8437', '-79.5181', {}, '-80.9412', '-79.8523', '-82.1607', '-77.8539', '-82.2021', '-78.5114', '-79.3565', '-78.9486', '-77.4558', '-80.8166', '-78.4804', '-78.4856', '-76.3024', '-77.5713', '-78.0602', '-77.3969', '-80.1119', '-77.915', '-78.2577', '-79.4088', '-82.2938', '-77.8658', '-77.5356', '-76.7788', '-77.3866', '-77.2998', '-77.1751', '-77.8082', '-80.3184', '-78.2627', '-79.6833', '-76.9386', '-78.0667', '-77.4871', '-80.9176', '-80.8207', '-76.5043', '-77.8944', '-81.4413', '-78.3756', '-77.588', '-78.9135', '-76.3629', '-77.4715', '-78.8735', '-77.4288', '-79.9514', '-79.4906', '-77.2985', '-76.8371', '-76.8041', '-77.0624', '-76.8017', '-76.4549', '-83.4944', '-79.444', '-77.7244', '-77.9984', '-78.0217', '-79.1911', '-78.16', '-77.484', '-79.8636', '-76.3245', '-78.7047', '-76.4461', '-80.4028', '-79.0231', '-76.9862', '-76.5185', '-76.259', '-76.2758', '-82.626', '-78.1307', '-77.9683', '-78.3881', '-80.5106', '-77.3914', '-79.5867', '-76.3569', '-76.354', '-77.7789', '-78.5592', '-77.2258', '-77.409', '-80.5739', '-80.5583', '-78.1599', '-77.4755', '-79.9581', '-79.1973', '-78.9228', '-81.9537', '-80.0554', '-82.5868', '-78.5158', '-81.5775', '-77.2501', '-77.5892', '-77.3806', '-79.0608', '-76.6398', '-76.8333', '-77.4001', '-81.7632', '-76.0435', '-78.1994', '-81.9711', '-78.9012', '-76.5808', '-76.7075', '-78.1745', '-82.3158', '-81.0984', '-76.5146', '-80.1882', '-78.1322', '-81.6541', '-80.9429', '-80.5975', '-82.1376', '-81.2271', '-80.9595', '-80.7343', '-81.2718', '-79.2409', '-80.706', '-80.5627', '-78.7447', '-80.307', '-81.6607', '-77.8048', '-81.3037', '-81.9906', '-80.1552', '-80.5693', '-81.9655', '-81.3313', '-81.2581', '-78.7615', '-81.9657', '-80.0076', '-80.795', '-78.2272', '-81.1943', '-80.5972', '-79.9191', '-79.8006', '-81.8449', '-81.1057', '-79.5245', '-81.0943', '-81.4264', '-80.8828', '-79.4609', '-80.974', '-80.3426', '-82.4315', '-80.6404', '-81.1762', '-81.5381', '-81.487']
Z = []
#[7.0, 30.0, 34.0, 1.0, 62.0, 52.0, 263.0, 144.0, 48.0, 307.0, 60.0, 10.0, 104.0, 13.0, 126.0, 5.0, 11.0, 4.0, 230.0, 6.0, 55.0, 239.0, 57.0, 50.0, 159.0, 84.0, 23.0, 12.0, 7.0, 38.0, 10.0, 86.0, 39.0, 547.0, 49.0, 177.0, 108.0, 24.0, 8.0, 27.0, 39.0, 14.0, 49.0, 8.0, 74.0, 58.0, 284.0, 61.0, 2.0, 8.0, 10.0, 72.0, 52.0, 1293.0, 204.0, 143.0, 499.0, 165.0, 218.0, 9.0, 221.0, 66.0, 31.0, 56.0, 162.0, 39.0, 13.0, 5.0, 9.0, 15.0, 280.0, 43.0, 30.0, 11.0, 64.0, 160.0, 51.0, 62.0, 8.0, 7.0, 15.0, 23.0, 7.0, 30.0, 166.0, 33.0, 42.0, 21.0, 41.0, 43.0, 51.0, 15.0, 10.0, 36.0, 331.0, 191.0, 104.0, 324.0, 6.0, 106.0, 188.0, 34.0, 78.0, 13.0, 13.0, 3.0, 53.0, 4.0, 6.0, 7.0, 61.0, 16.0, 73.0, 14.0, 313.0, 18.0, 53.0, 265.0, 140.0, 171.0, 104.0, 267.0, 55.0, 38.0, 86.0, 494.0, 12.0, 79.0, 33.0, 349.0, 138.0, 61.0, 9.0, 81.0, 893.0, 30.0, 100.0, 1265.0, 114.0, 314.0, 33.0, 812.0, 13.0, 240.0, 26.0, 162.0, 90.0, 3628.0, 124.0, 190.0, 5.0, 194.0, 40.0, 17.0, 87.0, 232.0, 44.0, 10.0, 424.0, 110.0, 371.0, 75.0, 37.0, 750.0, 112.0, 626.0, 138.0, 244.0, 43.0, 63.0, 100.0, 2.0, 1685.0, 44.0, 47.0, 35.0, 2.0, 25.0, 8.0, 100.0, 171.0, 90.0, 222.0, 33.0, 5.0, 180.0, 457.0, 20.0, 462.0, 85.0, 72.0, 274.0, 336.0, 292.0, 57.0, 68.0, 69.0, 40.0, 274.0, 120.0, 162.0, 1.0, 120.0, 11.0, 52.0, 3415.0, 124.0, 125.0, 46.0, 223.0, 231.0, 75.0, 1421.0, 81.0, 154.0, 5.0, 35.0, 65.0, 229.0, 52.0, 72.0, 13.0, 37.0, 59.0, 46.0, 369.0, 919.0, 24.0, 203.0, 194.0, 4.0, 112.0, 34.0, 80.0, 62.0, 195.0, 70.0, 6.0, 485.0, 383.0, 105.0, 68.0, 407.0, 452.0, 138.0, 76.0, 69.0, 26.0, 152.0, 106.0, 2.0, 407.0, 37.0, 43.0, 6259.0, 53.0, 28.0, 119.0, 5.0, 63.0, 3.0, 13.0, 6.0, 9.0, 54.0, 77.0, 260.0, 37.0, 498.0, 39.0, 503.0, 9.0, 20.0, 17.0, 34.0, 8.0, 64.0, 3.0, 112.0, 35.0, 18.0, 40.0, 2.0, 12.0, 56.0, 115.0, 7.0, 143.0, 19.0, 6.0, 18.0, 19.0, 35.0, 8.0, 14.0, 167.0, 217.0, 8.0, 43.0, 27.0, 101.0, 8.0, 42.0, 78.0, 13.0, 29.0, 5.0, 383.0, 38.0, 7.0, 112.0, 17.0, 6.0, 69.0, 5.0, 140.0, 50.0, 4.0, 153.0, 34.0, 12.0, 23.0, 11.0, 20.0, 44.0, 66.0, 147.0, 8.0, 245.0, 26.0, 1.0, 24.0, 8.0, 25.0, 32.0, 10.0, 2.0, 65.0, 3.0, 149.0, 29.0, 16.0, 47.0, 17.0, 29.0, 8.0, 6.0, 16.0, 4.0, 197.0, 1.0, 14.0, 229.0, 160.0, 5.0, 2.0, 3.0, 39.0, 42.0, 39.0, 23.0, 16.0, 9.0, 240.0, 34.0, 29.0, 21.0, 294.0, 222.0, 32.0, 21.0, 599.0, 317.0, 19.0, 66.0, 135.0, 42.0, 196.0, 102.0, 92.0, 6.0, 228.0, 166.0, 23.0, 52.0, 1.0, 9.0, 237.0, 195.0, 187.0, 117.0, 7.0, 16.0, 1.0, 72.0, 303.0, 140.0, 22.0, 2.0, 173.0, 40.0, 61.0, 3.0, 166.0, 3.0, 9.0, 8.0, 25.0, 26.0, 18.0, 92.0, 16.0, 53.0, 12.0, 22.0, 340.0, 137.0, 145.0, 30.0, 38.0, 27.0, 326.0, 32.0, 119.0, 228.0, 35.0, 13.0, 83.0, 92.0, 17.0, 13.0, 33.0, 183.0, 1.0, 2.0, 4.0, 13.0, 1.0, 27.0, 95.0, 21.0, 10.0, 1.0, 89.0, 6.0]
alreadyCounty = []
#2010

for opID in OP_Sort_Data['Synthetic opioids'].keys():
    for year in OP_Sort_Data['Synthetic opioids'][opID].keys():
        for stateID in OP_Sort_Data['Synthetic opioids'][opID][year].keys():
            for countyID in OP_Sort_Data['Synthetic opioids'][opID][year][stateID].keys():
                #print(countyLoc[stateID][countyID]['lat'], countyLoc[stateID][countyID])
                if str(countyLoc[stateID][countyID]['lat']) == '{}':
                    continue
                elif str(countyLoc[stateID][countyID]['lat']) == '{}':
                    continue
                elif countyID in alreadyCounty:
                    Z[alreadyCounty.index(countyID)] += OP_Sort_Data['Synthetic opioids'][opID][year][stateID][countyID]
                else:
                    X.append(float(str(countyLoc[stateID][countyID]['lat'])))
                    Y.append(float(str(countyLoc[stateID][countyID]['lng'])))
                    alreadyCounty.append(countyID)
                    Z.append(OP_Sort_Data['Synthetic opioids'][opID][year][stateID][countyID])

ES = Vividict()

for i in range(0, len(alreadyCounty)):
    if alreadyCounty[i][0:2] == "21":
        ES['KY'][alreadyCounty[i]] = Z[i]
        
    if alreadyCounty[i][0:2] == "39":
        ES['OH'][alreadyCounty[i]] = Z[i]
        
    if alreadyCounty[i][0:2] == "42":
        ES['PA'][alreadyCounty[i]] = Z[i]
        
    if alreadyCounty[i][0:2] == "51":
        ES['VA'][alreadyCounty[i]] = Z[i]
        
    if alreadyCounty[i][0:2] == "54":
        ES['WV'][alreadyCounty[i]] = Z[i]
print(ES)

ES_most = {
        'KY': 0,
        'PA': 0,
        'VA': 0,
        'WV': 0,
        'OH': 0,
        }

ES_most_CT = {
        'KY': '',
        'PA': '',
        'VA': '',
        'WV': '',
        'OH': '',
        }

for stateID in ES.keys():
    for countyID in ES[stateID].keys():
        if ES[stateID][countyID] > ES_most[stateID]:
            ES_most[stateID] = ES[stateID][countyID]
            ES_most_CT[stateID] = countyID

print("KY most: ", ES_most_CT['KY'], ES_most['KY'])
print("PA most: ", ES_most_CT['PA'], ES_most['PA'])
print("VA most: ", ES_most_CT['VA'], ES_most['VA'])
print("WV most: ", ES_most_CT['WV'], ES_most['WV'])
print("OH most: ", ES_most_CT['OH'], ES_most['OH'])


print(len(Z))
print(len(X))
print(len(Y))
print(len(alreadyCounty))

#X, Y = np.meshgrid(X, Y)
#print(X, Y)
#R = np.sqrt(X**2 + Y**2)
#print(R)
#print(type(R))
X = np.array(X)
Y = np.array(Y)
Z = np.array(Z)


norm = plt.Normalize(Z.min(), Z.max()) 
print(Z.min())
print(Z.max())
colours = plt.cm.rainbow(norm(Z + 1000)) 

# 具体函数方法可用 help(function) 查看，如：help(ax.plot_surface)
ax.bar3d(Y, X, 0, dx = 0.5, dy = 0.5, dz = Z, color=colours)

plt.title('The Number of 8-year Opioids Reports of Synthetic opioids')

colourMap = plt.cm.ScalarMappable(cmap=plt.cm.rainbow)
colourMap.set_array(Z - 1000)

colBar = plt.colorbar(colourMap).set_label('Number of Opioids Reports') 

ax.set_xlabel('\nLongitude (\u00B0)') 
ax.set_ylabel('\nLatitude (\u00B0)') 
#ax.set_zlabel('\nNumber of Opioids Reports') 

ax.view_init(elev=90,azim=270)

#help(ax.plot_surface)
#help(ax.bar3d)
#plt.grid()
fig.set_size_inches(8, 4)
plt.tight_layout()


plt.savefig('mapSynthetic_opioids.jpg', dpi=300)

plt.show()
